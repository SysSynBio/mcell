# Static API definition
# - classes whose objects represent the static state of the model
# TODO: rename - this file contains also dynamic API definition
constants:
  - name: STATE_UNSET
    type: str
    value: state_unset
    
  - name: STATE_UNSET_INT
    type: int
    value: -1
        
  - name: BOND_UNBOUND
    type: int
    value: 0
    
    
ComponentType:
  superclass: BaseDataClass
  items:
  - name: name
    type: str
    
  - name: states
    type: List[str]
    default: empty
    
  methods:
  - name: inst
    return_type: ComponentInstance
    params:
    - name: state
      type: str
      default: STATE_UNSET_INT
    - name: bond
      type: int
      default: BOND_UNBOUND

  - name: inst
    return_type: ComponentInstance
    params:
    - name: state
      type: int
      default: STATE_UNSET
    - name: bond
      type: int
      default: BOND_UNBOUND
      
      
ComponentInstance:
  superclass: BaseDataClass
  items:
  - name: component_type
    type: ComponentType*

  - name: state
    type: str
    default: STATE_UNSET
    
  - name: bond
    type: int
    default: BOND_UNBOUND      
    
      
MoleculeType:
  superclass: BaseDataClass
  items:
  - name: name
    type: str
    
  - name: components
    type: List[ComponentType*]
    default: empty

  - name: diffusion_constant_2d
    type: float
    default: unset
    doc: This molecule is constrained to a surface and diffuses with  diffusion constant D.
      
  - name: diffusion_constant_3d
    type: float
    default: unset # the value is optional and might need to be checked with a more complex check
    doc: This molecule diffuses in space with diffusion constant D. D can be zero, in which case the molecule doesnâ€™t move. The units of D are cm 2 /s.
      
  methods:
  - name: inst
    return_type: MoleculeInstance
    params:
    - name: components
      type: List[ComponentInstance*]
      
      
MoleculeInstance:
  superclass: BaseDataClass
  items:
  - name: molecule_type
    type: MoleculeType*
    
  - name: components
    type: List[ComponentInstance*]
    default: empty

    
ComplexInstance:    
  superclass: BaseDataClass
  items:
  - name: molecule_types
    type: List[MoleculeType*]
    default: empty

    
Species:
  superclass: ComplexInstance
  items:
  - name: name
    type: str
    doc: Name of the species
    
    
ReleaseSite:
  superclass: BaseDataClass
  items:
  - name: name
    type: str
    doc: Name of the release site
    
  - name: shape
    type: str
    doc: |
      Release molecules in the specified shape. Valid shapes are 'cubic', spherical', 'spherical_shell', and 'list'; or the name of the  name of region(s) on which to release.
      
  - name: molecule
    type: Species* # Species must have beemn defined before
    doc: | 
      The named molecule is the one that will be released. Not used for  the 'list' shape. You must specify an orientation 
      if the molecule is a surface molecule.
       
  - name: location
    type: Vec3 # Vec3 and Vec2 are built-in data types
    default: unset # null is equivalent to None in YAML
    
  - name: site_diameter
    type: float
    default: unset
    
  - name: site_radius
    type: float
    default: unset
    
  - name: release_probability
    type: float
    default: unset
    
    
GeometryObject:
  superclass: BaseDataClass
  items:
  - name: name
    type: str
    doc: Name of the object
    
    
# Dynamic API definition
Subsystem:
  methods:
  - name: add_species
    params:
    - name: s
      type: Species*
      
  - name: find_species # 'find' prefix is always used when the  
    return_type: Species*
    params:
    - name: name
      type: str
      
      
InstantiationData:
  methods:
  - name: add_release_site
    params:
    - name: s
      type: Species*
      
  - name: find_release_site
    return_type: ReleaseSite*
    params:
    - name: name
      type: str
      
  - name: add_geometry_object
    params:
    - name: o
      type: GeometryObject*
      
  - name: find_geometry_object
    params:
    - name: name
      type: str
      
      
Model:
  superclasses: [Subsystem, InstantiationData]
  
  methods:
  - name: run_iterations
    params:
    - name: iterations
      type: long
      
  - name: add_subsystem
    params:
    - name: subsystem
      type: Subsystem*
      
  - name: add_instantiation_data
    params:
    - name: instantiation_data
      type: InstantiationData*
